/* Imports */
@import url("https://fonts.googleapis.com/css2?family=Inter&family=Rubik&display=swap");

/* Variables */
:root {
  --mustard: #ffdb58;
  --cadetgrey: #91a3b0;
  --slategrey: #708090;
  --charcoal: #36454f;
  --bittersweet: #fe6f5e;
}

/* Whole Document */
* {
  margin: 0;
  padding: 0;
}
html {
  scroll-behavior: smooth;
}
body {
  font-family: "Rubik", sans-serif;
  font-size: calc(5rem / 4);
  color: white;
  background: rgb(1, 11, 19);
  background: linear-gradient(
    90deg,
    rgba(1, 11, 19, 1) 0%,
    rgba(53, 56, 57, 1) 50%,
    rgba(1, 11, 19, 1) 100%
  );
  overflow-x: hidden;
}

/* Conditions */
::selection {
  background-color: var(--mustard);
  color: black;
}
a:hover > img {
  filter: invert(100%);
}

/* Class */
.container {
  min-height: 84vh;
  padding: 2em 8vw;
  /* padding-top: 64px; */
  scroll-margin-top: 32px;
}
.circle {
  border-radius: 100%;
  overflow: hidden;
}

/* Header */
header {
  margin: 5vh 0 3vh;
  padding: 2vh;
  background: red;
  background: radial-gradient(
    circle,
    rgba(230, 0, 38, 1) 20%,
    rgba(114, 47, 55, 1) 100%
  );
  display: flex;
  justify-content: center;
}
header img {
  height: 84px;
}

/*Main*/
main {
  display: flex;
  justify-content: center;
}
main iframe {
  height: 60vh;
  width: 60vw;
}

/* Footer */
footer {
  background-color: var(--mustard);
  z-index: 1;
  user-select: none;
  position: absolute;
  bottom: 0;
  width: 100%;
}
footer menu {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  list-style-type: none;
  /* min-height: 32px; */
}
footer a {
  padding: 0.4em;
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  color: black;
  font-weight: bold;
}
footer img {
  height: 1.5em;
  width: auto;
  filter: invert(0%);
}
footer figure {
  display: inline-flex;
  align-items: center;
  gap: 8px;
}
footer a:hover {
  background-color: var(--bittersweet);
  color: white;
}
footer a:hover img {
  filter: invert(100%);
}

/* Notes */

/* Selector
*  (all)
.class
.class1.class2 = has both class1 and class2
.class1 .class2 = has class2 descending from class1
#id
element
element.class = element with class
element1,element2 = all element1 and all element2
element1 element2 = all element2 from element1
element1>element2 = all element2 descending from element1
element1+element2 = first element2 child of element1
element1~element2 = all element2 that has been preceded by element1
[attribute]
[attribute=value]
*/

/* Units
cm = centimeters
mm = milimeters (10mm = 1cm)
in = inches (1in = 2.54cm)
px = pixels (96px = 1in)
pt = points (72pt = 1in)
pc = picas (1pc = 12pt)
em = times the font size
rem = times the font size of the root element
ex = times the x-height (rarely used)
ch = times the width of 0
% = % of parent element
vw = % of viewport width
vh = % of viewport height
vmin = % of viewport's smallest dimension (between w and h)
vmax = % of viewport's largest dimension (between w and h)
*/

/* Functions
calc(CALCULATION i.e. 100px / 2)
*/

/* margin/border/padding: 
4 values: top right bottom left
3 values: top right-left bottom
2 values: top-bottom right-left
1 value: all
*/

/* display:grid
grid-template: grid-template-rows / grid-template-columns
grid-template-rows: UNIT | % | repeat(INT, UNIT|%) | fr for fraction
grid-template-columns: UNIT | % | repeat(INT, UNIT|%) | fr for fraction
-
grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;
grid-row: grid-row-start / grid-row-end;
grid-row-start: INT | span INT
grid-row-end: INT | span INT
grid-column: grid-column-start / grid-column-end;
grid-column-start: INT | span INT
grid-column-end: INT | span INT
-
order: INT 
*/

/* display: flex
flex-flow: flex-direction flex-wrap
flex-direction: row* | row-reverse | column | column-reverse
flex-wrap: nowrap* | wrap | wrap-reverse
justify-content   (in flex-direction):  flex-start* | flex-end | center | space-between | space-around | space-evenly
align-items (90deg to flex-direction):  flex-start  | flex-end | center | baseline | stretch*
align-content (spacing):                flex-start  | flex-end | center | space-between | space-around | space-evenly | stretch*
-
align-self  (90deg to flex-direction):  flex-start  | flex-end | center | baseline | stretch*
order: INT 
*/
